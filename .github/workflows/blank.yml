name: Continuos Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run a one-line script
        run: echo Hello, world!

  get-the-files:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Running a custom script
        run: |
          ls -al

  get-the-multilinetask:
    needs: 
      - build
      - get-the-files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run a multi-line script
        if: always()
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Check Java Version
        run: |
          java -version

      - name: Install Gradle
        run: |
          sudo apt-get update
          sudo apt-get install -y gradle

      - name: Gradle Build
        run: |
          gradle build --info --stacktrace

      - name: Verify build directory contents
        run: |
          echo "Checking contents of build directory after Gradle build"
          ls -al build

      - name: Verify files generated by Gradle
        run: |
          echo "Checking contents of build/libs after Gradle build"
          ls -al build/libs || echo "build/libs directory not found"

      - name: Docker version
        run: |
          docker --version
          docker images -a  

      - name: Docker Login
        run: echo "${{ secrets.dockerhubpassword }}" | docker login -u ${{ secrets.dockerhubusername }} --password-stdin

      - name: Verify Dockerfile location
        run: |
          if [ -f ./Dockerfile ]; then
            echo "Dockerfile found in the root directory."
          else
            echo "Dockerfile not found in the root directory."
            exit 1
          fi
          
      - name: Docker image Tag
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile -t ${{ secrets.dockerhubusername }}/demo-kotlin2.0:${IMAGE_TAG} .
          docker push ${{ secrets.dockerhubusername }}/demo-kotlin2.0:${IMAGE_TAG}
